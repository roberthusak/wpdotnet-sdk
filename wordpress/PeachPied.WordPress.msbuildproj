<Project Sdk="Peachpie.NET.Sdk">
  <PropertyGroup Label="Globals">
    <ProjectGuid>0e51d101-0992-4aa6-a134-26ea3f2e3934</ProjectGuid>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <NoWarn>PHP0125,PHP5011,PHP6002,PHP5018,PHP5026,PHP6006</NoWarn>
    <Copyright>WordPress</Copyright>
    <Description>
      Use "Peachpied.WordPress.AspNetCore" package to use the WordPress within ASP.NET Core application.
      
      This package is a dependency and does not work standalone.
    </Description>
    <DefineConstants>$(DefineConstants);OBJECT="OBJECT";</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblyName>Peachpied.WordPress.$(Configuration)</AssemblyName>
  </PropertyGroup>
  <PropertyGroup Condition="
    '$(Configuration)' == 'PhpDocOverloadsStatic' or
    '$(Configuration)' == 'PhpDocOverloadsDynamic' or
    '$(Configuration)' == 'PhpDocOverloadsBranch' or
    '$(Configuration)' == 'CallSiteOverloadsStatic' or
    '$(Configuration)' == 'CallSiteOverloadsBranch' or
    '$(Configuration)' == 'UsageOverloadsStatic' or
    '$(Configuration)' == 'UsageOverloadsBranch' or
    '$(Configuration)' == 'TargetedOverloadsStatic'">
    <ExperimentalOptimization>$(Configuration)</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'PhpDocForce'">
    <PhpDocTypes>ParameterTypes,ReturnTypes</PhpDocTypes>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'PhpDocForceParams'">
    <PhpDocTypes>ParameterTypes</PhpDocTypes>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'PhpDocForceParamFunctions'">
    <PhpDocTypes>ParameterTypes</PhpDocTypes>
    <ExperimentalOptimization>PhpDocForceOnlyFunctions</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticString'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeString,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchString'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeString,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticStringNotNull'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeString,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchStringNotNull'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeString,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticPhpString'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializePhpString,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchPhpString'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializePhpString,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticAnyString'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeString,SpecializePhpString</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchAnyString'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeString,SpecializePhpString</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticNumber'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeNumbers,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchNumber'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeNumbers,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchPhpNumber'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeNumbers,DisableStringParameterCasting,ForceSpecializedParametersNotNull,AllowPhpNumberRuntimeSpecialization</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticArray'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializePhpArray,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchArray'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializePhpArray,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticObject'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeObjects,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchObject'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeObjects,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticObjectNull'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeObjects,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchObjectNull'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeObjects,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticNull'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchNull'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticAll'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeCommon,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchAll'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeCommon,DisableStringParameterCasting,ForceSpecializedParametersNotNull</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticAllNull'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeCommon,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchAllNull'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeCommon,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticObjectAndNull'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeObjects,SpecializeNull,ForceSpecializedParametersNotNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsBranchObjectAndNull'">
    <ExperimentalOptimization>CallSiteOverloads,BranchedCallSites,SpecializeObjects,SpecializeNull,ForceSpecializedParametersNotNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticKnown'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeCommon,SpecializeNull,ForceSpecializedParametersNotNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticAll'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeAll,ForceSpecializedParametersNotNull,DisableStringParameterCasting</ExperimentalOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'CallSiteOverloadsStaticAllIncremental'">
    <ExperimentalOptimization>CallSiteOverloads,SpecializeAll,ForceSpecializedParametersNotNull,DisableStringParameterCasting,EnableIncrementalSpecialization</ExperimentalOptimization>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableCallCounting)' == ''">
    <EnableCallCounting>false</EnableCallCounting>
  </PropertyGroup>
  <PropertyGroup Condition="'$(EnableCallCounting)'">
    <ExperimentalOptimization Condition="'$(ExperimentalOptimization)' == ''">RoutineCallCounting,RecordCompilationTime,RecordSpecializationList</ExperimentalOptimization>
    <ExperimentalOptimization Condition="'$(ExperimentalOptimization)' != ''">$(ExperimentalOptimization),RoutineCallCounting,RecordCompilationTime,RecordSpecializationList</ExperimentalOptimization>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableCallTracing)' == ''">
    <EnableCallTracing>false</EnableCallTracing>
  </PropertyGroup>
  <PropertyGroup Condition="'$(EnableCallTracing)'">
    <ExperimentalOptimization Condition="'$(ExperimentalOptimization)' == ''">RoutineCallTracing,RoutineCallParameterTracing,RetainSpecializedParametersNotNullCheck</ExperimentalOptimization>
    <ExperimentalOptimization Condition="'$(ExperimentalOptimization)' != ''">$(ExperimentalOptimization),RoutineCallTracing,RoutineCallParameterTracing,RetainSpecializedParametersNotNullCheck</ExperimentalOptimization>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="**/*.php" Exclude="
      obj/**;
      bin/**;
      wp-includes/class-json.php;
      wp-config-sample.php;
      wp-content/uploads/**;
      wp-content/plugins/hello.php;
      wp-content/plugins/akismet/**;
      wp-content/plugins/**/Tests/**;
      **/jetpack-autoloader/src/*.php;
      **/SplFixedArray.php;
      **/Composer/Installers/*.php
      " />
    <Content Include="**" Exclude="
      obj/**;
      bin/**;
      .vs/**;
      .vscode/**;
      *.manifest;readme.html;
      wp-admin/**/*.php;
      wp-includes/**/*.php;
      wp-content/cache/**;
      wp-content/uploads/**;
      wp-content/mu-plugins/**/*.php;
      ##wp-content/plugins/**/*.php;
      wp-content/plugins/akismet/**;
      wp-content/plugins/*.php;
      wp-content/themes/**/*.php;
      *.php;
      *.msbuildproj;*.msbuildproj.user;
      " CopyToOutputDirectory="PreserveNewest">
      <PackagePath>contentFiles/any/$(TargetFramework)/wordpress/</PackagePath>
      <PackageCopyToOutput>true</PackageCopyToOutput>
      <Link>wordpress\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Content>
    <None Include="license.txt" Pack="true" PackagePath=""/>
  </ItemGroup>
  <ItemGroup>
    <!--PackageReference Include="Peachpie.RequestHandler" Version="$(PeachpieVersion)" /-->
    <ProjectReference Include="..\PeachPied.WordPress.Standard\PeachPied.WordPress.Standard.csproj" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>
</Project>